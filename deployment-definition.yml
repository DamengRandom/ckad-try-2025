appVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  labels:
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-deployment-pod
      labels:
        app: myapp-deployment
        type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx
  replicas: 3
  selector:
    matchLabels:
      type: front-end

# Common commands:
# kubectl create -f deployment-definition.yml
# kubectl get deployments
# kubectl get replicaset
# kubectl get pods # (replicaset will auto create pods !!!)
# kubectl get all

# kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3

# kubectl expose pod redis --port=6379 --name=redis-service # edeploy service

# kubectl create deployment redis-deploy -n dev-ns --image=redis --replicas=2


# Key Functions of a Deployment
# Pod Management:

# A Deployment ensures that a specified number of Pods (replicas) are running at all times.

# If a Pod fails or is deleted, the Deployment automatically replaces it.

# Rolling Updates:

# A Deployment supports rolling updates, allowing you to update your application with zero downtime.

# You can specify the update strategy (e.g., rolling update or recreate) and control the pace of the rollout.

# Rollback:

# If an update introduces issues, you can easily roll back to a previous version of the Deployment.

# Scaling:

# You can scale the number of Pods up or down by updating the replicas field in the Deployment.

# Self-Healing:

# If a Pod or node fails, the Deployment ensures that the desired number of Pods is maintained.



# How a Deployment Works
# A Deployment manages ReplicaSets, which in turn manage Pods. Here's how it works:

# Desired State:

# You define the desired state of your application in a Deployment manifest (YAML file).

# This includes the number of replicas, the container image, environment variables, resource limits, and more.

# ReplicaSet Creation:

# When you create a Deployment, Kubernetes creates a ReplicaSet to manage the Pods.

# The ReplicaSet ensures that the specified number of Pods is running.

# Pod Creation:

# The ReplicaSet creates and manages the Pods based on the template defined in the Deployment.

# Updates and Rollbacks:

# When you update the Deployment (e.g., change the container image), Kubernetes creates a new ReplicaSet and gradually replaces the old Pods with new ones.

# If something goes wrong, you can roll back to a previous version of the Deployment.